{
    "Version": "v1",
    "MappingFields": [
        {
            "Name": "Action",
            "Description": "[Required]\n1 = Create New Record.\n2 = Update Existing Record.\n3 = Upsert Record (Updates the record if it exists; otherwise, creates a new one).\n4 = Delete Existing Record.\n8 = Cancel Key.\n9 = Ban User.\n10 = Unban User.\n11 = JustIN_Mobile (Updates users or creates a new one. Assigns a key if no key is currently assigned).\n\nNote: If no action is specified, the software defaults to action = 3 (Upsert Record).",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create",
                        "Enable",
                        "Update",
                        "Disable"
                    ],
                    "MappingMode": "Fixed",
                    "Value": "\"3\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": true
                },
                {
                    "MapForActions": [
                        "Delete"
                    ],
                    "MappingMode": "Fixed",
                    "Value": "\"4\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": false
                }
            ]
        },
        {
            "Name": "AntipassbackEnabled",
            "Description": "Enable antipassback within the user’s key.\n0 = OFF: Antipassback is disabled.\n1 = ON: Antipassback is enabled.",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create",
                        "Update"
                    ],
                    "MappingMode": "Fixed",
                    "Value": "\"0\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": true
                }
            ]
        },
        {
            "Name": "AuditOpenings",
            "Description": "All the openings are registered within the user’s key.\n0 = OFF: Audit openings are disabled.\n1 = ON: Audit openings are enabled.\n\nNote: SALTO STRONGLY RECOMMENDS = 1",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create"
                    ],
                    "MappingMode": "Fixed",
                    "Value": "\"1\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": true
                }
            ]
        },
        {
            "Name": "Dummy1",
            "Description": "General purpose field #1.",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create",
                        "Update"
                    ],
                    "MappingMode": "Fixed",
                    "Value": "\"HelloID\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": true
                }
            ]
        },
        {
            "Name": "Dummy2",
            "Description": "General purpose field #2.",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create",
                        "Update"
                    ],
                    "MappingMode": "Field",
                    "Value": "\"Person.ExternalId\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": true
                }
            ]
        },
        {
            "Name": "Dummy3",
            "Description": "General purpose field #3.",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create"
                    ],
                    "MappingMode": "None",
                    "Value": "null",
                    "UsedInNotifications": false,
                    "StoreInAccountData": true
                }
            ]
        },
        {
            "Name": "Dummy4",
            "Description": "General purpose field #4.",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create"
                    ],
                    "MappingMode": "None",
                    "Value": "null",
                    "UsedInNotifications": false,
                    "StoreInAccountData": true
                }
            ]
        },
        {
            "Name": "Dummy5",
            "Description": "General purpose field #5.",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create"
                    ],
                    "MappingMode": "None",
                    "Value": "null",
                    "UsedInNotifications": false,
                    "StoreInAccountData": true
                }
            ]
        },
        {
            "Name": "ExtID",
            "Description": "[Required]\nInternal Salto ID. Long ID for existing accounts, employeeId for accounts generated by HelloID.\nUsed as AccountReference.",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create"
                    ],
                    "MappingMode": "None",
                    "Value": "null",
                    "UsedInNotifications": false,
                    "StoreInAccountData": true
                }
            ]
        },
        {
            "Name": "FirstName",
            "Description": "First name of the user.",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create",
                        "Update"
                    ],
                    "MappingMode": "Field",
                    "Value": "\"Person.Name.NickName\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": true
                }
            ]
        },
        {
            "Name": "LastName",
            "Description": "Last name of the user.",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create",
                        "Update"
                    ],
                    "MappingMode": "Complex",
                    "Value": "\"// generateSurnameOption1.js [https://github.com/Tools4everBV/HelloID-Lib-Prov-HelperFunctions/blob/master/Javascript/Target/Surname_Lastname/Scripts/generateSurnameOption1.js]\\r\\n//\\r\\n// Mapping logic to generate the Surname according to the following convention.\\r\\n// B\\tvan den Boele\\r\\n// BP\\tvan den Boele – de Vries\\r\\n// P\\tde Vries\\r\\n// PB   de Vries – van den Boele\\r\\nfunction generateSurname() {\\r\\n    let nickName = Person.Name.NickName;\\r\\n    let middleName = Person.Name.FamilyNamePrefix;\\r\\n    let lastName = Person.Name.FamilyName;\\r\\n    let middleNamePartner = Person.Name.FamilyNamePartnerPrefix;\\r\\n    let lastNamePartner = Person.Name.FamilyNamePartner;\\r\\n    let convention = Person.Name.Convention;\\r\\n\\r\\n    let surName = '';\\r\\n    switch (convention) {\\r\\n        case \\\"BP\\\":\\r\\n            if (typeof middleName !== 'undefined' && middleName) { surName = surName + middleName + ' ' }\\r\\n            surName = surName + lastName;\\r\\n\\r\\n            surName = surName + ' - ';\\r\\n            if (typeof middleNamePartner !== 'undefined' && middleNamePartner) { surName = surName + middleNamePartner + ' ' }\\r\\n            surName = surName + lastNamePartner;\\r\\n            break;\\r\\n        case \\\"PB\\\":\\r\\n            if (typeof middleNamePartner !== 'undefined' && middleNamePartner) { surName = surName + middleNamePartner + ' ' }\\r\\n            surName = surName + lastNamePartner;\\r\\n\\r\\n            surName = surName + ' - ';\\r\\n            if (typeof middleName !== 'undefined' && middleName) { surName = surName + middleName + ' ' }\\r\\n            surName = surName + lastName;\\r\\n            break;\\r\\n        case \\\"P\\\":\\r\\n            if (typeof middleNamePartner !== 'undefined' && middleNamePartner) { surName = surName + middleNamePartner + ' ' }\\r\\n            surName = surName + lastNamePartner;\\r\\n            break;\\r\\n        case \\\"B\\\":\\r\\n        default:\\r\\n            if (typeof middleName !== 'undefined' && middleName) { surName = surName + middleName + ' ' }\\r\\n            surName = surName + lastName;\\r\\n            break;\\r\\n    }\\r\\n    // Trim spaces at start and end\\r\\n    surName = surName.trim();\\r\\n\\r\\n    // Shorten string to maxAttributeLength \\r\\n    const maxAttributeLength = 64;\\r\\n    surName = surName.substring(0, maxAttributeLength);\\r\\n\\r\\n    return surName;\\r\\n}\\r\\n\\r\\ngenerateSurname();\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": true
                }
            ]
        },
        {
            "Name": "MobileAppType",
            "Description": "Note: This is an index field, so it starts at 0. This differs from the value you see in the Salto DB itself (value in staging is value in DB - 1).",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create"
                    ],
                    "MappingMode": "Fixed",
                    "Value": "\"2\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": true
                }
            ]
        },
        {
            "Name": "PhoneNumber",
            "Description": "Phone number of the user.",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create",
                        "Update"
                    ],
                    "MappingMode": "Field",
                    "Value": "\"Person.Contact.Business.Phone.Fixed\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": true
                }
            ]
        },
        {
            "Name": "Title",
            "Description": "Honorific title of the user (e.g., Mr., Mrs., Dr.).",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create",
                        "Update"
                    ],
                    "MappingMode": "Field",
                    "Value": "\"Person.ExternalId\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": true
                }
            ]
        },
        {
            "Name": "dtActivation",
            "Description": "Date and time of the key in the format MM/DD/YYYY HH:MM:SS.\nExample: 06/30/2017 00:00:00.\nCreate: Set the date far in the future to make sure the account is not active.\nEnable: Set the date to today to make the account active.",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create"
                    ],
                    "MappingMode": "Fixed",
                    "Value": "\"12/31/2099 00:00:00\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": false
                },
                {
                    "MapForActions": [
                        "Enable"
                    ],
                    "MappingMode": "Complex",
                    "Value": "\"function getActivationDate(){\\r\\n    let activationDate = new Date();\\r\\n\\r\\n    // Extract date components\\r\\n    let month = ('0' + (activationDate.getMonth() + 1)).slice(-2);\\r\\n    let day = ('0' + activationDate.getDate()).slice(-2);\\r\\n    let year = activationDate.getFullYear();\\r\\n\\r\\n    // Format the date to 'MM/DD/YYYY HH:mm:ss'\\r\\n    let formattedDate = `${month}/${day}/${year} 00:00:00`;\\r\\n\\r\\n    return formattedDate;\\r\\n}\\r\\n\\r\\ngetActivationDate();\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": false
                }
            ]
        },
        {
            "Name": "dtExpiration",
            "Description": "Date and time of the key in the format MM/DD/YYYY HH:MM:SS.\nExample: 06/30/2017 00:00:00.\nNote: Empty will result in no expiration.\nCreate: Empty to make sure there is no expiration date.\nEnable: Empty to make sure there is no expiration date.\nDisable: Set the date to yesterday to make the account inactive.",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create",
                        "Enable"
                    ],
                    "MappingMode": "Fixed",
                    "Value": "\"\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": false
                },
                {
                    "MapForActions": [
                        "Disable"
                    ],
                    "MappingMode": "Complex",
                    "Value": "\"function getExpirationDate() {\\r\\n    let now = new Date();\\r\\n    let expirationDate = new Date();\\r\\n    expirationDate.setDate(now.getDate() - 1);\\r\\n\\r\\n    // Extract date components\\r\\n    let month = ('0' + (expirationDate.getMonth() + 1)).slice(-2);\\r\\n    let day = ('0' + expirationDate.getDate()).slice(-2);\\r\\n    let year = expirationDate.getFullYear();\\r\\n\\r\\n    // Format the date to 'MM/DD/YYYY HH:mm:ss'\\r\\n    let formattedDate = `${month}/${day}/${year} 00:00:00`;\\r\\n\\r\\n    return formattedDate;\\r\\n}\\r\\n\\r\\ngetExpirationDate();\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": false
                }
            ]
        },
        {
            "Name": "office",
            "Description": "Put a door in office mode (permanently opened).\n0 = OFF: Office mode is disabled.\n1 = ON: Office mode is enabled.",
            "Type": "Text",
            "MappingActions": [
                {
                    "MapForActions": [
                        "Create"
                    ],
                    "MappingMode": "Fixed",
                    "Value": "\"0\"",
                    "UsedInNotifications": false,
                    "StoreInAccountData": true
                }
            ]
        }
    ],
    "UniqueFieldNames": []
}